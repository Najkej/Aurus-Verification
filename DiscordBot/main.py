import discord
from discord import app_commands
from discord.ext import commands
from discord import ui
import mysql.connector
import random
import requests

connection = mysql.connector.connect(
    host="your-host",
    user="your-username",
    password="your-password",
    database="your-database"
    )

words = ["jablko", "gruszka", 'telefon', "woda", "telewizor", "komputer", "ananas", "zegar", "auto"]

dataid = {}
dataword = {}

bot = commands.Bot(command_prefix="!", intents= discord.Intents.default())

query = connection.cursor()
checkdb = connection.cursor()
verifyquery = connection.cursor()
deletequery = connection.cursor()

guild = None

class VerificationModal(ui.Modal, title='Zweryfikuj swoje konto Roblox!'):
    RobloxID = ui.TextInput(label='Podaj ID swojego profilu Roblox')


    async def on_submit(self, interaction: discord.Interaction):
        if requests.get(url=f"https://www.roblox.com/users/{self.RobloxID.value}/profile").status_code == 200:
            checkdb.execute(f"SELECT * FROM Users WHERE DiscordID = '{interaction.user.id}';")
            results = checkdb.fetchall()

            if results:
                print("abc")
                await interaction.response.send_message(f"JesteÅ› juÅ¼ zweryfikowany na naszym serwerze! JeÅ¼eli wystÄ…piÅ‚ bÅ‚Ä…d skontaktuj siÄ™ z naszÄ… adminstracjÄ…! ", ephemeral=True)
            else:
                print("bcb")
                robloxname = requests.get(f"https://users.roblox.com/v1/users/{self.RobloxID.value}").json()["name"]
                query.execute(f"INSERT INTO Users (RobloxID, DiscordID, Zweryfikowany, NickRoblox, NickDiscord) VALUES ('{self.RobloxID.value}', '{interaction.user.id}', 0, '{robloxname}', '{interaction.user}');")
                connection.commit()
                dataid[int(interaction.user.id)] = [self.RobloxID.value]
                verificationoptionsembed = discord.Embed(title="Sposoby weryfikacji konta", description=f"1. ZmieÅ„ opis swojego profilu Roblox! Wygeneruj losowe sÅ‚owo oraz dodaj je do opisu, nic prostszego! \n 2. DoÅ‚Ä…cz na grÄ™ weryfikacji! DoÅ‚Ä…cz na grÄ™ i podaj swÃ³j nick Discord! [NIEDOSTÄ˜PNE]")
                optionsbutton = OptionsButtons()

                await interaction.response.send_message(embed=verificationoptionsembed, view=optionsbutton, ephemeral=True)
        else:
            await interaction.response.send_message(content="Nie znaleziono profilu gracza! Upewnij siÄ™ Å¼e wpisaÅ‚eÅ› ID konta Roblox, w razie problemÃ³w zajrzyj na kanaÅ‚ pomocy z weryfikacjÄ…!", ephemeral=True)
        

class VerificationButtons(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label="Weryfikuj", emoji="âœ…", style=discord.ButtonStyle.green, custom_id="main")
    async def werifikuj(self, interaction : discord.Interaction, Button: discord.ui.Button):
        await interaction.response.send_modal(VerificationModal())
        
class OptionsButtons(discord.ui.View):

    class CheckButtons(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=None)
        
        @discord.ui.button(label="SprawdÅº opis!", emoji="âœ…", style=discord.ButtonStyle.green, custom_id="main")
        async def check(self, interaction : discord.Interaction, Button: discord.ui.Button):
            print(dataid)
            valuelist = dataid[interaction.user.id][0]
            req = requests.get(url=f"https://www.roblox.com/users/{valuelist}/profile").text

            if dataword[int(interaction.user.id)][0] == None:
                await interaction.response.send_message(f"WystÄ…piÅ‚ bÅ‚Ä…d, skontaktuj siÄ™ z administracjÄ… Aurus Verification! Kod bÅ‚edu : 801", ephemeral=True)

            if dataword[interaction.user.id][0] in requests.get(f"https://users.roblox.com/v1/users/{valuelist}").json()["description"]:

                print("znaleziono")
                await interaction.user.add_roles(interaction.guild.get_role(1174021413515051058), reason="PomyÅ›lna weryfikacja - AurusVerification")

                verifyquery.execute(f"UPDATE Users SET Zweryfikowany = 1 WHERE DiscordID = '{interaction.user.id}';")
                connection.commit()
                await interaction.response.send_message(f"PomyÅ›lnie zweryfikowaÅ‚eÅ› siÄ™ na AurusVerification! PowinieneÅ› dostaÄ‡ Whiteliste na grze. Gdyby wystÄ…piÅ‚y problemy skontaktuj siÄ™ z administracjÄ… bota!", ephemeral=True)

            else:
                await interaction.response.send_message(f"Nie znaleziono sÅ‚owa {dataword[int(interaction.user.id)][0]} w opisie twojego profilu!", ephemeral=True)


    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label="1. ZmieÅ„ opis profilu", emoji="ðŸ’¬", style=discord.ButtonStyle.blurple, custom_id="describeprofile")
    async def describeprofile(self, interaction : discord.Interaction, Button: discord.ui.Button):
        randomword = random.choice(words)
        dataword[int(interaction.user.id)] = [randomword]
        checkbutton = self.CheckButtons()
        await interaction.response.send_message(f"ZmieÅ„ opis swojego profilu na roblox na taki zawierajÄ…cy sÅ‚owo '{randomword}'! Po zmienieniu opisu dotknij przycisku 'SprawdÅº opis', gdyby wystÄ…piÅ‚y problemy skontaktuj siÄ™ z administracjÄ…!", view=checkbutton, ephemeral=True)
        print("describe")

    @discord.ui.button(label="2. DoÅ‚Ä…cz na grÄ™!", emoji="ðŸŽ®", style=discord.ButtonStyle.blurple, custom_id="playgame", disabled=True)
    async def playgame(self, interaction : discord.Interaction, Button: discord.ui.Button):
        print("playgame")


@bot.event
async def on_ready():
    print(f'Logged in as {bot.user.name}')
    
    try:
        synced = await bot.tree.sync()
        print("synced") 
    except Exception as e:
        print(e)

    


@bot.tree.command(name="info", description="SprawdÅº informacje o bocie!")
async def info(interaction: discord.Interaction):
    info = discord.Embed(title="INFORMACJE O BOCIE", color=0x00ff00, description=f"Bot jest w peÅ‚ni open-sourced oraz dziaÅ‚a na licencji MIT. \n Napisany przez @najkej_ (nick Discord), wykorzystuje technologie FastAPI, MySQL oraz Discord.py. Jest napisany gÅ‚Ã³wnie w Python oraz Lua (dla obsÅ‚ugi zapytaÅ„ gier). \n Github : https://github.com/Najkej/AurusVerification/tree/main")

    await interaction.response.send_message(embed=info, ephemeral=True)



@bot.tree.command(name="verify", description="Zweryfikuj swoje konto Roblox oraz dostaÅ„ siÄ™ na Whiteliste!")

async def zapis(interaction: discord.Interaction):
    embed = discord.Embed(
        title="Weryfikacja AurusVerification",
        description="Aby siÄ™ zweryfikowaÄ‡ kliknij przycisk poniÅ¼ej oraz podÄ…Å¼aj zgodnie z poleceniami. W razie problemÃ³w skontaktuj siÄ™ z administracjÄ… bota!",
        color=discord.Color.brand_green()
    )

    button = discord.ui.button(label="Zweryfikuj siÄ™!")

    guild = interaction.guild
    
    await interaction.response.send_message(embed=embed, view=VerificationButtons(), ephemeral=True)


@bot.tree.command(name="deleteverification", description="Usuwa weryfikacje, tylko z permisjami admina.")
@app_commands.describe(id = "ID uÅ¼ytkownika ktÃ³rego weryfikacje chcesz usunÄ…Ä‡!")
async def deleteverification(interaction: discord.Interaction, id: str):
    if interaction.user.guild_permissions.administrator:
        try:
            deletequery.execute(f"DELETE FROM Users WHERE DiscordID = '{id}'")
            connection.commit()
            await interaction.response.send_message(content="UsuniÄ™to weryfikacje osobie!", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(content=f"Nie udaÅ‚o sie usunÄ…Ä‡ weryfikacji! {e}", ephemeral=True)
    else:
        await interaction.response.send_message(content="Nie masz wystarczajÄ…cych uprawnieÅ„!", ephemeral=True)



bot.run('Your_bot_token')
